{"version":3,"file":"simple-md-parser.min.js","mappings":"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","sources":["webpack://simpleMDParser/webpack/universalModuleDefinition","webpack://simpleMDParser/webpack/bootstrap","webpack://simpleMDParser/webpack/runtime/define property getters","webpack://simpleMDParser/webpack/runtime/hasOwnProperty shorthand","webpack://simpleMDParser/webpack/runtime/make namespace object","webpack://simpleMDParser/./src/simple-md-parser.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"simpleMDParser\"] = factory();\n\telse\n\t\troot[\"simpleMDParser\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Convert a string containing Markdown links, images, codeblocks, inline code, bold and italic text to an HTML string.\n *   1. Remove duplicate linebreaks and spaces (including <br>)\n *   2. Convert linebreaks to <br>\n *   3. Convert URLs that are not part of a markdown tag to markdown tags\n *   4. Convert ``` MD code blocks to <pre><code> blocks\n *   5. Convert ` inline code to <code> tags\n *   6. Convert ** bold tags to <b> tags\n *   7. Convert * italics tags to <i> tags\n *   8. Convert ![]() image tags to <img> tags\n *   9. Convert []() links (including the ones from step 3) to <a> tags\n * @param {String} str - The Markdown string to convert to HTML\n * @param {Function} url_callback (optional) - A function that is called for each URL\n *\t The callback function is provided two params - A URL and a the type of tag it was called from  (\"image\" or \"link\")\n *\t If the function returns a promise, it will be awaited and the result used\n *\t If the function returns a string that is a complete, valid URL, the string will be used.\n *\t If the function returns anything else, the tag will not be processed at all.\n * @return {String} - Apromise that resolves with the string containing the HTML converted Markdown \n */\n export async function parse({ str, url_callback, render_tag }) {\n\n\tif (typeof str !== \"string\") return \"\";\n\n\tconst validate_url = async (url, type) => {\n\t\ttry {\n\t\t\tif ('function' === typeof url_callback) {\n\t\t\t\turl = await Promise.resolve(url_callback(url, type));\n\t\t\t}\n\t\t\tnew URL(url);\n\t\t\treturn url;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tif (typeof render_tag !== 'function') {\n\t\trender_tag = (tagname, attrs, innerText) => {\n\t\t\tswitch (tagname) {\n\t\t\t\tcase \"b\":\n\t\t\t\t\treturn `<b>${innerText}</b>`;\n\t\t\t\tcase \"i\":\n\t\t\t\t\treturn `<i>${innerText}</i>`;\n\t\t\t\tcase \"a\":\n\t\t\t\t\treturn `<a href=\"${encodeURI(attrs.href)}\">${innerText.replace(/<\\/a>/gmi, '&lt;/a>')}</a>`;\n\t\t\t\tcase \"img\":\n\t\t\t\t\treturn `<img src=\"${encodeURI(attrs.src)}\" alt=\"${attrs.alt.replace(/\\\\/gmi, '&#8726;').replace(/\"/gmi, '&quot;')}\" />`;\n\t\t\t\tcase \"code\":\n\t\t\t\t\treturn `<code>${innerText.replace(/<\\/code>/gmi, '&lt;/code>')}</code>`;\n\t\t\t\tcase \"pre\":\n\t\t\t\t\treturn `<pre><code>${innerText.replace(/<\\/code>/gmi, '&lt;/code>').replace(/<\\/pre>/gmi, '&lt;/pre>')}</code></pre>`;\n\t\t\t\tcase \"ul\":\n\t\t\t\t\treturn `<ul>${innerText.map(text => `<li>${text}</li>`).join('')}</ul>`;\n\t\t\t\tcase \"ol\":\n\t\t\t\t\treturn `<ol>${innerText.map(text => `<li>${text}</li>`).join('')}</ol>`;\n\t\t\t\tcase \"br\":\n\t\t\t\t\treturn `<br />`;\n\t\t\t\tdefault:\n\t\t\t\t\treturn \"\";\n\t\t\t}\n\t\t};\n\t}\n\n\tvar url_regex = /(https?:\\/\\/)?((www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}|localhost)\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gmi,\n\t\timg_regex = /!\\[([^\\]]*)\\]\\(((https?:\\/\\/)?((www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}|localhost)\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*))\\)/gmi,\n\t\tlink_regex = /\\[([^\\]]*)\\]\\(((https?:\\/\\/)?((www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}|localhost)\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*))\\)/gmi,\n\t\topening_pos = false,\n\t\tclosing_pos = false,\n\t\tlast_index = 0,\n\t\tlink_matches,\n\t\timg_matches,\n\t\turl_matches;\n\n\t// Convert <br> to \\n\n\t// Remove extra spaces\n\t// Ensure no more than two consecutive line breaks\n\tstr = str.replace(/<br[^>]*>/gmi, \"\\n\");\n\tstr = str.replace(/ +/gmi, ' ');\n\tstr = str.replace(/\\n{2,}/gmi, \"\\n\\n\");\n\n\t// Parse lists\n\tlet lines = str.split(/\\n/);\n\tlet curr_list = [];\n\tlet lists = [];\n\n\tlet is_prev_line_list_item = false;\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tlet item = lines[i].match(/^\\s*-\\s?([^\\n]*)$/);\n\t\tif (lines[i].match(/^\\s*--/)) item = null;\n\t\tif (item !== null) {\n\t\t\tcurr_list.push(item[1]);\n\t\t} else if (curr_list.length) {\n\t\t\tlists.push({ type: 'ul', line_pos: i - curr_list.length, items: curr_list });\n\t\t\tcurr_list = [];\n\t\t}\n\t}\n\tif (curr_list.length) {\n\t\tlists.push({ type: 'ul', line_pos: lines.length - curr_list.length, items: curr_list });\n\t\tcurr_list = [];\n\t}\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tlet item = lines[i].match(/^\\s*\\d+[\\.\\)]\\s?([^\\n]*)$/);\n\t\tif (item !== null) {\n\t\t\tcurr_list.push(item[1]);\n\t\t} else if (curr_list.length) {\n\t\t\tlists.push({ type: 'ol', line_pos: i - curr_list.length, items: curr_list });\n\t\t\tcurr_list = [];\n\t\t}\n\t}\n\tif (curr_list.length) {\n\t\tlists.push({ type: 'ol', line_pos: lines.length - curr_list.length, items: curr_list });\n\t\tcurr_list = [];\n\t}\n\n\tlists.sort((a, b) => a.line_pos > b.line_pos ? 1 : -1);\n\n\tfor (let i = lists.length; i--;) {\n\t\tlines.splice(lists[i].line_pos, lists[i].items.length);\n\t\tlines[lists[i].line_pos] = render_tag(lists[i].type, {}, lists[i].items) + (lines[lists[i].line_pos] || '');\n\t\tif (lines[lists[i].line_pos - 1]) {\n\t\t\tlines[lists[i].line_pos - 1] += lines[lists[i].line_pos];\n\t\t\tlines.splice(lists[i].line_pos, 1);\n\t\t}\n\t}\n\n\t// Convert line breaks (back) to <br>\n\tstr = lines.join(render_tag('br', {}, null));\n\n\t// Find all URLs that are not part of an image or link tag and convert them to a link tag\n\turl_matches = [...str.matchAll(url_regex)].reverse();\n\turl_matches_loop: for (let n = 0; n < url_matches.length; n++) {\n\t\tvar url = await validate_url(url_matches[n][0], 'link');\n\t\tif (false === url) continue;\n\n\t\tlink_matches = [...str.matchAll(link_regex)].reverse();\n\t\tfor (let i = 0; i < link_matches.length; i++) {\n\t\t\tif (url_matches[n].index > link_matches[i].index && url_matches[n].index < link_matches[i].index + link_matches[i][0].length) {\n\t\t\t\tcontinue url_matches_loop;\n\t\t\t}\n\t\t}\n\n\t\timg_matches = [...str.matchAll(img_regex)].reverse();\n\t\tfor (let i = 0; i < img_matches.length; i++) {\n\t\t\tif (url_matches[n].index > img_matches[i].index && url_matches[n].index < img_matches[i].index + img_matches[i][0].length) {\n\t\t\t\tcontinue url_matches_loop;\n\t\t\t}\n\t\t}\n\n\t\tstr = str.substring(0, url_matches[n].index + url_matches[n][0].length) + ')' + str.substring(url_matches[n].index + url_matches[n][0].length);\n\t\tstr = str.substring(0, url_matches[n].index) + '[' + url_matches[n][0] + '](' + url + str.substring(url_matches[n].index + url_matches[n][0].length);\n\t}\n\n\t// block code\n\twhile (last_index > -1) {\n\t\tlast_index = str.indexOf(\"```\", last_index);\n\t\tif (last_index > -1) {\n\t\t\tif (opening_pos === false) opening_pos = last_index;\n\t\t\telse closing_pos = last_index;\n\t\t\tlast_index += 3;\n\t\t}\n\t\tif (opening_pos !== false && closing_pos !== false) {\n\t\t\tlet br = render_tag('br', {}, null)\n\t\t\tlet block_code = str.substring(opening_pos + 3, closing_pos);\n\n\t\t\tif(block_code.startsWith(br)){\n\t\t\t\tblock_code = block_code.substring(br.length)\n\t\t\t}\n\t\t\t\n\t\t\tif(block_code.endsWith(br)){\n\t\t\t\tblock_code = block_code.substring(0, block_code.length-br.length)\n\t\t\t}\n\n\t\t\tblock_code = block_code.replaceAll(br, \"\\n\");\n\t\t\tblock_code = block_code.replaceAll('<', '&lt;');\n\t\t\tblock_code = block_code.replaceAll('>', '&gt;');\n\t\t\tlet html = render_tag('pre', {}, block_code);\n\t\t\thtml = html.replaceAll(\"\\n\", br);\n\n\t\t\tlet before_html = str.substring(0, opening_pos);\n\t\t\tlet after_html = str.substring(closing_pos + 3).replace(/^\\s*/, '');\n\n\t\t\t// remove up to 2 line breaks following the code block, since <pre> is a block level element\n\t\t\tif(after_html.startsWith(br)){\n\t\t\t\tafter_html = after_html.substring(br.length);\n\t\t\t\tif(after_html.startsWith(br)){\n\t\t\t\t\tafter_html = after_html.substring(br.length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstr = before_html + html + after_html;\n\n\t\t\tlast_index = opening_pos + html.length;\n\t\t\topening_pos = false;\n\t\t\tclosing_pos = false;\n\t\t}\n\t}\n\n\topening_pos = false;\n\tclosing_pos = false;\n\tlast_index = 0;\n\n\t// inline code\n\twhile (last_index > -1) {\n\t\tlast_index = str.indexOf(\"`\", last_index);\n\t\tif (last_index > -1) {\n\t\t\tif (opening_pos === false) opening_pos = last_index;\n\t\t\telse closing_pos = last_index;\n\t\t\tlast_index++;\n\t\t}\n\t\tif (opening_pos !== false && closing_pos !== false) {\n\t\t\tlet html = render_tag('code', {}, str.substring(opening_pos + 1, closing_pos).replaceAll('<', '&lt;').replaceAll('>', '&gt;'));\n\t\t\tstr = str.substring(0, opening_pos) + html + str.substring(closing_pos + 1);\n\t\t\tlast_index = opening_pos + html.length;\n\t\t\topening_pos = false;\n\t\t\tclosing_pos = false;\n\t\t}\n\t}\n\n\topening_pos = false;\n\tclosing_pos = false;\n\tlast_index = 0;\n\n\t// replace bold tags\n\twhile (last_index > -1) {\n\t\tlast_index = str.indexOf(\"**\", last_index);\n\t\tif (last_index > -1) {\n\t\t\tif (opening_pos === false) opening_pos = last_index;\n\t\t\telse closing_pos = last_index;\n\t\t\tlast_index += 2;\n\t\t}\n\t\tif (opening_pos !== false && closing_pos !== false) {\n\t\t\tlet html = render_tag('b', {}, str.substring(opening_pos + 2, closing_pos));\n\t\t\tstr = str.substring(0, opening_pos) + html + str.substring(closing_pos + 2);\n\t\t\tlast_index = opening_pos + html.length;\n\t\t\topening_pos = false;\n\t\t\tclosing_pos = false;\n\t\t}\n\t}\n\n\topening_pos = false;\n\tclosing_pos = false;\n\tlast_index = 0;\n\n\t// replace italic tags\n\twhile (last_index > -1) {\n\t\tlast_index = str.indexOf(\"*\", last_index);\n\t\tif (last_index > -1) {\n\t\t\tif (opening_pos === false) opening_pos = last_index;\n\t\t\telse closing_pos = last_index;\n\t\t\tlast_index++;\n\t\t}\n\t\tif (opening_pos !== false && closing_pos !== false) {\n\t\t\tlet html = render_tag('i', {}, str.substring(opening_pos + 1, closing_pos));\n\t\t\tstr = str.substring(0, opening_pos) + html + str.substring(closing_pos + 1);\n\t\t\tlast_index = opening_pos + html.length;\n\t\t\topening_pos = false;\n\t\t\tclosing_pos = false;\n\t\t}\n\t}\n\n\t// Convert img tags to <img>\n\timg_matches = [...str.matchAll(img_regex)].reverse();\n\tfor (let n = 0; n < img_matches.length; n++) {\n\t\tvar url = await validate_url(img_matches[n][2], 'image');\n\t\tif (false === url) continue;\n\t\tlet html = render_tag('img', { src: url, alt: img_matches[n][1] }, null);\n\t\tstr = str.substring(0, img_matches[n].index) + html + str.substring(img_matches[n].index + img_matches[n][0].length);\n\t}\n\n\t// Convert links to <a> tags\n\tlink_matches = [...str.matchAll(link_regex)].reverse();\n\tfor (let n = 0; n < link_matches.length; n++) {\n\t\tvar url = await validate_url(link_matches[n][2], 'link');\n\t\tif (false === url) continue;\n\t\tlet html = render_tag('a', { href: url }, link_matches[n][1]);\n\t\tstr = str.substring(0, link_matches[n].index) + html + str.substring(link_matches[n].index + link_matches[n][0].length);\n\t}\n\n\treturn str;\n}"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","async","parse","str","url_callback","render_tag","validate_url","url","type","Promise","resolve","URL","e","tagname","attrs","innerText","encodeURI","href","replace","src","alt","map","text","join","link_matches","img_matches","url_matches","img_regex","link_regex","opening_pos","closing_pos","last_index","lines","split","curr_list","lists","i","length","item","match","push","line_pos","items","sort","a","b","splice","matchAll","reverse","url_matches_loop","n","index","substring","indexOf","br","block_code","startsWith","endsWith","replaceAll","html","before_html","after_html"],"sourceRoot":""}